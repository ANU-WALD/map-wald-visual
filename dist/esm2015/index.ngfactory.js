"use strict";
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
Object.defineProperty(exports, "__esModule", { value: true });
const i0 = require("@angular/core");
const i1 = require("./index");
const i2 = require("../node_modules/@ng-bootstrap/ng-bootstrap/ng-bootstrap.ngfactory");
const i3 = require("@angular/common");
const i4 = require("@angular/forms");
const i5 = require("@angular/common/http");
const i6 = require("@ng-bootstrap/ng-bootstrap");
const i7 = require("map-wald");
const i8 = require("./geocoding.service");
const i9 = require("@agm/core/services/maps-api-loader/maps-api-loader");
const i10 = require("@agm/core/core.module");
const i11 = require("ngx-pipes/src/app/pipes/array/index");
const i12 = require("ngx-pipes/src/app/pipes/string/index");
const i13 = require("ngx-pipes/src/app/pipes/math/index");
const i14 = require("ngx-pipes/src/app/pipes/boolean/index");
const i15 = require("ngx-pipes/src/app/pipes/object/index");
const i16 = require("ngx-pipes/src/app/index");
var MapWaldBootstrapModuleNgFactory = i0.ɵcmf(i1.MapWaldBootstrapModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.NgbAlertNgFactory, i2.NgbDatepickerNgFactory, i2.ɵuNgFactory, i2.ɵvNgFactory, i2.ɵnNgFactory, i2.ɵqNgFactory, i2.ɵrNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i4.ɵangular_packages_forms_forms_o, i4.ɵangular_packages_forms_forms_o, []), i0.ɵmpd(4608, i5.HttpXsrfTokenExtractor, i5.ɵangular_packages_common_http_http_g, [i3.DOCUMENT, i0.PLATFORM_ID, i5.ɵangular_packages_common_http_http_e]), i0.ɵmpd(4608, i5.ɵangular_packages_common_http_http_h, i5.ɵangular_packages_common_http_http_h, [i5.HttpXsrfTokenExtractor, i5.ɵangular_packages_common_http_http_f]), i0.ɵmpd(5120, i5.HTTP_INTERCEPTORS, function (p0_0) { return [p0_0]; }, [i5.ɵangular_packages_common_http_http_h]), i0.ɵmpd(4608, i5.ɵangular_packages_common_http_http_d, i5.ɵangular_packages_common_http_http_d, []), i0.ɵmpd(6144, i5.XhrFactory, null, [i5.ɵangular_packages_common_http_http_d]), i0.ɵmpd(4608, i5.HttpXhrBackend, i5.HttpXhrBackend, [i5.XhrFactory]), i0.ɵmpd(6144, i5.HttpBackend, null, [i5.HttpXhrBackend]), i0.ɵmpd(4608, i5.HttpHandler, i5.ɵHttpInterceptingHandler, [i5.HttpBackend, i0.Injector]), i0.ɵmpd(4608, i5.HttpClient, i5.HttpClient, [i5.HttpHandler]), i0.ɵmpd(4608, i6.NgbModal, i6.NgbModal, [i0.ComponentFactoryResolver, i0.Injector, i6.ɵw, i6.NgbModalConfig]), i0.ɵmpd(4608, i7.OpendapService, i7.OpendapService, [i5.HttpClient]), i0.ɵmpd(4608, i7.MetadataService, i7.MetadataService, [i7.OpendapService]), i0.ɵmpd(4608, i7.AvailableDatesService, i7.AvailableDatesService, [i7.MetadataService]), i0.ɵmpd(4608, i7.PointSelectionService, i7.PointSelectionService, [i7.MetadataService]), i0.ɵmpd(4608, i7.TimeseriesService, i7.TimeseriesService, [i7.MetadataService, i7.OpendapService]), i0.ɵmpd(4608, i7.StaticDataService, i7.StaticDataService, [i5.HttpClient]), i0.ɵmpd(4608, i7.PaletteService, i7.PaletteService, [i5.HttpClient]), i0.ɵmpd(4608, i7.TimeUtilsService, i7.TimeUtilsService, []), i0.ɵmpd(4608, i7.WMSService, i7.WMSService, []), i0.ɵmpd(4608, i7.MapViewParameterService, i7.MapViewParameterService, [i3.Location]), i0.ɵmpd(4608, i7.ProjectionService, i7.ProjectionService, []), i0.ɵmpd(4608, i7.CatalogService, i7.CatalogService, [i5.HttpClient, i7.MetadataService]), i0.ɵmpd(4608, i7.TreeFilterService, i7.TreeFilterService, []), i0.ɵmpd(4608, i8.GeocodingService, i8.GeocodingService, [i9.MapsAPILoader]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i4.ɵangular_packages_forms_forms_d, i4.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i4.FormsModule, i4.FormsModule, []), i0.ɵmpd(1073742336, i10.AgmCoreModule, i10.AgmCoreModule, []), i0.ɵmpd(1073742336, i5.HttpClientXsrfModule, i5.HttpClientXsrfModule, []), i0.ɵmpd(1073742336, i5.HttpClientModule, i5.HttpClientModule, []), i0.ɵmpd(1073742336, i11.NgArrayPipesModule, i11.NgArrayPipesModule, []), i0.ɵmpd(1073742336, i12.NgStringPipesModule, i12.NgStringPipesModule, []), i0.ɵmpd(1073742336, i13.NgMathPipesModule, i13.NgMathPipesModule, []), i0.ɵmpd(1073742336, i14.NgBooleanPipesModule, i14.NgBooleanPipesModule, []), i0.ɵmpd(1073742336, i15.NgObjectPipesModule, i15.NgObjectPipesModule, []), i0.ɵmpd(1073742336, i16.NgPipesModule, i16.NgPipesModule, []), i0.ɵmpd(1073742336, i6.NgbAccordionModule, i6.NgbAccordionModule, []), i0.ɵmpd(1073742336, i6.NgbAlertModule, i6.NgbAlertModule, []), i0.ɵmpd(1073742336, i6.NgbButtonsModule, i6.NgbButtonsModule, []), i0.ɵmpd(1073742336, i6.NgbCarouselModule, i6.NgbCarouselModule, []), i0.ɵmpd(1073742336, i6.NgbCollapseModule, i6.NgbCollapseModule, []), i0.ɵmpd(1073742336, i6.NgbDatepickerModule, i6.NgbDatepickerModule, []), i0.ɵmpd(1073742336, i6.NgbDropdownModule, i6.NgbDropdownModule, []), i0.ɵmpd(1073742336, i6.NgbModalModule, i6.NgbModalModule, []), i0.ɵmpd(1073742336, i6.NgbPaginationModule, i6.NgbPaginationModule, []), i0.ɵmpd(1073742336, i6.NgbPopoverModule, i6.NgbPopoverModule, []), i0.ɵmpd(1073742336, i6.NgbProgressbarModule, i6.NgbProgressbarModule, []), i0.ɵmpd(1073742336, i6.NgbRatingModule, i6.NgbRatingModule, []), i0.ɵmpd(1073742336, i6.NgbTabsetModule, i6.NgbTabsetModule, []), i0.ɵmpd(1073742336, i6.NgbTimepickerModule, i6.NgbTimepickerModule, []), i0.ɵmpd(1073742336, i6.NgbTooltipModule, i6.NgbTooltipModule, []), i0.ɵmpd(1073742336, i6.NgbTypeaheadModule, i6.NgbTypeaheadModule, []), i0.ɵmpd(1073742336, i6.NgbModule, i6.NgbModule, []), i0.ɵmpd(1073742336, i7.MapWaldCoreModule, i7.MapWaldCoreModule, []), i0.ɵmpd(1073742336, i1.MapWaldBootstrapModule, i1.MapWaldBootstrapModule, []), i0.ɵmpd(256, i5.ɵangular_packages_common_http_http_e, "XSRF-TOKEN", []), i0.ɵmpd(256, i5.ɵangular_packages_common_http_http_f, "X-XSRF-TOKEN", [])]); });
exports.MapWaldBootstrapModuleNgFactory = MapWaldBootstrapModuleNgFactory;
//# sourceMappingURL=data:application/json;base64,